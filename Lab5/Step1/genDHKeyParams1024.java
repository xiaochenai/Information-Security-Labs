import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.math.BigInteger;import java.security.AlgorithmParameterGenerator;import java.security.AlgorithmParameters;import java.security.NoSuchAlgorithmException;import java.security.spec.ECFieldFp;import java.security.spec.ECGenParameterSpec;import java.security.spec.ECParameterSpec;import java.security.spec.InvalidParameterSpecException;import javax.crypto.spec.DHParameterSpec;public class genDHKeyParams1024 {  public static void main(String[] args) throws IOException {    genDhParams(1);  }  //from http://exampledepot.com/egs/javax.crypto/GenDhParams.html    // Returns a tab-separated string of 3 values.    // The first number is the prime modulus P.    // The second number is the base generator G.    // The third number is bit size of the random exponent L.    public static void genDhParams(int keySize) {    	String[] curve = {"P192","P224","P256","P384","P521","B163","B223","B283","B409","B571","K163","K233","K283",    			"K409","K571"};        try {        	long start=0,end=0,ave=0;        	start = System.nanoTime();        	ECGenParameterSpec ecParamSpec_1 = new ECGenParameterSpec("P192");        	end = System.nanoTime();        	                    	for(int i=0;i<curve.length;i++)        	{	        		for(int j=0;j<1000;j++)        		{            		start = System.nanoTime();            		//System.out.println(start);            		ecParamSpec_1 = new ECGenParameterSpec(curve[i]);            		end = System.nanoTime();            		//System.out.println(end);            		ave = ave + (end-start);        		}        		System.out.println(curve[i] + " : " + ave/1000);        	}                }catch(Exception e){}            }}